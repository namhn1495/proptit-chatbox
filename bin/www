#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat3-demo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}



var rooms = ['Room 0', 'Room 1'];
var users = {};
io.sockets.on('connection', function (socket) {
  socket.on('newUser', function (username) {
    console.log('new client connected - username: ' + username + ' - id: ' + socket.id);
    socket.username = username;
    users[username] = username;
    socket.room = rooms[1];
    socket.join(socket.room);
    socket.emit('updateChat', 'SERVER', 'you have connected to ' + socket.room + '!');
    socket.broadcast.to(socket.room).emit('updateChat', 'SERVER', username + ' has connected to this room');
    io.sockets.in(socket.room).emit('updateUsersOnline', users);
  });

  socket.on('sendMessage', function (message) {
    console.log(socket.username + ' - ' + socket.room + ' - send: ' + message);
    io.sockets.in(socket.room).emit('updateChat', socket.username, message);
  });

  socket.on('disconnect', function () {
    socket.broadcast.to(socket.room).emit('updateChat', 'SERVER', socket.username + ' has disconnected');
    console.log(socket.username + ' - room: ' + socket.room + ' - has disconnected!');
    socket.leave(socket.room);
    delete users[socket.username]
    io.sockets.in(socket.room).emit('updateUsersOnline', users);

  });
});